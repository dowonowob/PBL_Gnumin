//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Inputs/AR_Character/AddCharacter.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AddCharacter: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AddCharacter()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AddCharacter"",
    ""maps"": [
        {
            ""name"": ""Add"",
            ""id"": ""6227c987-2ec4-4f50-adfd-bacb925bb487"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""33bed3dd-ef26-42ea-85f8-1c8584e130e7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e558fda-2964-449c-ba15-bcbb86eb2269"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Add
        m_Add = asset.FindActionMap("Add", throwIfNotFound: true);
        m_Add_Newaction = m_Add.FindAction("New action", throwIfNotFound: true);
    }

    ~@AddCharacter()
    {
        UnityEngine.Debug.Assert(!m_Add.enabled, "This will cause a leak and performance issues, AddCharacter.Add.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Add
    private readonly InputActionMap m_Add;
    private List<IAddActions> m_AddActionsCallbackInterfaces = new List<IAddActions>();
    private readonly InputAction m_Add_Newaction;
    public struct AddActions
    {
        private @AddCharacter m_Wrapper;
        public AddActions(@AddCharacter wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Add_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Add; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AddActions set) { return set.Get(); }
        public void AddCallbacks(IAddActions instance)
        {
            if (instance == null || m_Wrapper.m_AddActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AddActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IAddActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IAddActions instance)
        {
            if (m_Wrapper.m_AddActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAddActions instance)
        {
            foreach (var item in m_Wrapper.m_AddActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AddActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AddActions @Add => new AddActions(this);
    public interface IAddActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
